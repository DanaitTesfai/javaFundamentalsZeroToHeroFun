1. Create a simple interface
  Question:
  Create an interface called Animal with a method makeSound().
  Create two classes Dog and Cat that implement Animal and print
  different sounds.

  Expected Output:

  Dog barks
  Cat meows
-------------------------------------------------------------------

Q2: Interface with Constant Variable
Goal: Learn how constants work in interfaces.

Instructions:

Create interface Bank with constant RATE = 5.0.

Create class SBI that prints the rate.
-----------------------------------------------------------------

Q3: Default Method in Interface
Goal: Understand default methods (introduced in Java 8).

Instructions:

Create interface Vehicle with:

void start();

default void stop();

Implement in class Car.

output:
Car started.
Vehicle stopped.
--------------------------------------------------------------------

Q4: Multiple Interfaces
Goal: Learn multiple inheritance through interfaces.

Instructions:

Create Flyable and Swimmable interfaces.

Create Duck class that implements both.

Duck flying
Duck swimming
-------------------------------------------------------------------

Q5: Interface Reference, Different Classes
Goal: Show polymorphism using an interface reference.

Instructions:

Create interface Playable with play().

Create Football and Piano classes.

Call both using Playable reference.

Playing Football
Playing Piano
--------------------------------------------------------------

Q6: Interface Array (Polymorphic Behavior)
Goal: Use interface objects inside an array.

Create interface shape with draw().

Create Circle and Rectangle classes.

Create an array of Shapes with different implementations
and print them
-------------------------------------------------------------

7. Calculator Using Interface & User Input
   Goal: Let the user choose an operation (Add/Subtract) using interface.

   Instructions:

   Create Operation interface with calculate(int a, int b).

   Create AddOperation and SubtractOperation.

   Ask user using Scanner which operation to perform.
---------------------------------------------------------------------

8.Payment System (Interface + Amount Input)
  Goal
  Use an interface to represent payment behavior and let the user choose UPI or Card at runtime.

  What You‚Äôll Build
  Payment interface ‚Üí void pay(double amount)

  UpiPayment and CardPayment implement Payment

  Ask user for amount + payment type ‚Üí print confirmation

  Step-by-Step
      Create Payment interface with void pay(double amount);

      Class UpiPayment implements Payment and prints "Paid X via UPI".

      Class CardPayment implements Payment and prints "Paid X via Credit Card".

      In main, ask for double amount.

      Ask for method: 1. UPI 2. Card

      Create Payment payment based on choice, then call payment.pay(amount).

      Enter amount: 300
      Choose payment method: 1. UPI  2. Card
      2
      Paid 300.0 via Credit Card


  8.1  Enter amount to pay: 500
       Select Payment Method:
       1Ô∏è‚É£ UPI
       2Ô∏è‚É£ Debit/Credit Card
       3Ô∏è‚É£ Mobile Wallet
       4Ô∏è‚É£ Net Banking
       Enter choice: 1
       Paid 500.0 via UPI

       Enter amount to pay: 1200
       Select Payment Method:
       1Ô∏è‚É£ UPI
       2Ô∏è‚É£ Debit/Credit Card
       3Ô∏è‚É£ Mobile Wallet
       4Ô∏è‚É£ Net Banking
       Enter choice: 2
       Paid 1200.0 via Credit/Debit Card

       Enter amount to pay: -100
       ‚ùå Invalid amount. Please enter a positive amount.


  8.2 Loop it

  8.3 Refactor the code using different methods

---------------------------------------------------------------

9.MegaMart, a retail store, wants a console-based system to manage inventory and basic billing.

      The store sells two types of products:

      Electronic Products ‚Äì mobile, laptop, TV etc.

      Grocery Products ‚Äì food, vegetables, dairy etc.

  The system must:

      Require admin login to access.

      Allow product registration using constructors.

      Store products using ArrayList<Product>.

      Implement interfaces for displayInfo() and calculateBill().

      Avoid duplicate products using Product ID comparison.

      Allow searching a product by ID.

      Display bill price with tax/discount logic via interface implementation.

  Scenario Overview
  MegaMart Store wants a basic inventory and billing system.
  Admin should be able to:

  Login using admin credentials

      Add products (Two types):
      1Ô∏è‚É£ ElectronicProduct ‚Äî has warranty years
      2Ô∏è‚É£ GroceryProduct ‚Äî has expiry date

      Prevent duplicate products using ID

      Calculate bill using interface method

      View and search for products

      Exit safely

  üß© Key Concepts Introduced
      Concept	Purpose
      Interface	Force billing and display rules
      Polymorphism	Call calculateBill() or displayInfo() through interface
      Encapsulation	Secure product fields
      No Abstract Classes	Interfaces only
      Real-World Design	Intro to contract-based OOP

  OOP CLASS DESIGN
      Component	Purpose
      Displayable (Interface)	Must implement displayInfo()
      Billable (Interface)	Must implement calculateBill()

      Product (Super Class)	Encapsulation of productId, name, basePrice
      ElectronicProduct	Adds warrantyYears, 15% tax
      GroceryProduct	Adds expiryDays, 10% discount if near expiry(10 days)

      Validation	Login and input checking
      Menu	Switch-based console system
      Main	Program entry

  Example Console Flow
      ===== MegaMart Admin Login =====
      Username: admin
      Password: 1234
      Login successful!

      === Product Management Menu ===
      1. Add Product
      2. View Products
      3. Search Product by ID
      4. Exit
      Choose option: 1
      Enter Product Type: 1.Electronic 2.Grocery
      1
      Enter Product ID: P101
      Enter Name: Laptop
      Enter Base Price: 50000
      Enter Warranty (years): 2
      Product added successfully!

      === Product Management Menu ===
      Choose option: 2

      --- Product List ---
      [Electronic] ID: P101 | Name: Laptop | Base: 50000.0 | Warranty: 2 years | Final Price: 57500.0