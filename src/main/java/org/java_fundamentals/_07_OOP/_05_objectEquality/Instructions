1. Student Management System
Scenario:
A school needs a system to manage student records.

The admin must log in before managing students.

Each student has:

studentId

name

grade

The system should allow the admin to:

Register a student.

View all students.

Search for a student by ID.

Prevent duplicate students using .equals() and hashCode().

Exit.

The program must use a switch statement to navigate through the menu options.

Instructions for Students:
Create a Student class with:

Private fields: studentId, name, grade.

A constructor to initialize the student.

Override .equals() and .hashCode() to consider two students equal if they have the same studentId.

Create a login system with a fixed username and password (admin / 1234).

Use an ArrayList<Student> to store all registered students.

Build a menu-driven program using a switch statement.


===== School Admin Login =====
Enter username: admin
Enter password: 1234
Login successful!

=== Student Management Menu ===
1. Register Student
2. View Students
3. Search Student by ID
4. Exit
Choose an option: 1
Enter Student ID: S001
Enter Name: Alice
Enter Grade: 10th
Student registered successfully!

Choose an option: 1
Enter Student ID: S001
Enter Name: Alice
Enter Grade: 10th
Duplicate student! Registration not allowed.

Choose an option: 2
--- Student List ---
ID: S001, Name: Alice, Grade: 10th

Choose an option: 3
Enter Student ID to search: S001
Student found: ID: S001, Name: Alice, Grade: 10th

Choose an option: 4
Exiting system... Goodbye!
--------------------------------------------------
2.Online Store Management System
  Scenario:
  An online store wants to manage its product inventory.

  The store manager must log in first.

  Each product has:

  productId

  name

  price

  The system should allow the manager to:

  Add a product.

  View all products.

  Search for a product by name.

  Prevent duplicate products based on productId.

  Exit.

  Instructions for Students:
  Create a Product class with private fields and a constructor.

  Override .equals() and .hashCode() so that two products are considered equal if they have the same productId.

  Use an ArrayList<Product> to store products.

  Implement a menu using a switch statement to navigate the options.

  ===== Online Store Login =====
  Enter username: manager
  Enter password: store123
  Login successful!

  === Online Store Menu ===
  1. Add Product
  2. View Products
  3. Search Product by Name
  4. Exit
  Choose an option: 1
  Enter Product ID: P001
  Enter Product Name: Laptop
  Enter Price: 800
  Product added successfully!

  Choose an option: 1
  Enter Product ID: P001
  Enter Product Name: Laptop
  Enter Price: 800
  Duplicate product! Cannot add.

  Choose an option: 2
  --- Product List ---
  ID: P001, Name: Laptop, Price: $800.0

  Choose an option: 3
  Enter product name to search: Laptop
  Product found: ID: P001, Name: Laptop, Price: $800.0

  Choose an option: 4
  Exiting system... Goodbye!